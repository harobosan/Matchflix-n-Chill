[
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_from_directory",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "db_commit",
        "importPath": "project.db",
        "description": "project.db",
        "isExtraImport": true,
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "Movie",
        "importPath": "project.db",
        "description": "project.db",
        "isExtraImport": true,
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "db_commit",
        "importPath": "project.db",
        "description": "project.db",
        "isExtraImport": true,
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "Preference",
        "importPath": "project.db",
        "description": "project.db",
        "isExtraImport": true,
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "db_commit",
        "importPath": "project.db",
        "description": "project.db",
        "isExtraImport": true,
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "Relationship",
        "importPath": "project.db",
        "description": "project.db",
        "isExtraImport": true,
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "Admin",
        "importPath": "project.db",
        "description": "project.db",
        "isExtraImport": true,
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "db_commit",
        "importPath": "project.db",
        "description": "project.db",
        "isExtraImport": true,
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "project.db",
        "description": "project.db",
        "isExtraImport": true,
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "Movie",
        "importPath": "project.db",
        "description": "project.db",
        "isExtraImport": true,
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "Admin",
        "importPath": "project.db",
        "description": "project.db",
        "isExtraImport": true,
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "project.db",
        "description": "project.db",
        "isExtraImport": true,
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "clean_movies",
        "importPath": "tests.factories.movies.clean_movies",
        "description": "tests.factories.movies.clean_movies",
        "isExtraImport": true,
        "detail": "tests.factories.movies.clean_movies",
        "documentation": {}
    },
    {
        "label": "clean_movies",
        "importPath": "tests.factories.movies.clean_movies",
        "description": "tests.factories.movies.clean_movies",
        "isExtraImport": true,
        "detail": "tests.factories.movies.clean_movies",
        "documentation": {}
    },
    {
        "label": "clean_users",
        "importPath": "tests.factories.users.clean_users",
        "description": "tests.factories.users.clean_users",
        "isExtraImport": true,
        "detail": "tests.factories.users.clean_users",
        "documentation": {}
    },
    {
        "label": "clean_users",
        "importPath": "tests.factories.users.clean_users",
        "description": "tests.factories.users.clean_users",
        "isExtraImport": true,
        "detail": "tests.factories.users.clean_users",
        "documentation": {}
    },
    {
        "label": "clean_admins",
        "importPath": "tests.factories.users.clean_users",
        "description": "tests.factories.users.clean_users",
        "isExtraImport": true,
        "detail": "tests.factories.users.clean_users",
        "documentation": {}
    },
    {
        "label": "clean_users",
        "importPath": "tests.factories.users.clean_users",
        "description": "tests.factories.users.clean_users",
        "isExtraImport": true,
        "detail": "tests.factories.users.clean_users",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "project",
        "description": "project",
        "isExtraImport": true,
        "detail": "project",
        "documentation": {}
    },
    {
        "label": "create_movie",
        "importPath": "project.movie",
        "description": "project.movie",
        "isExtraImport": true,
        "detail": "project.movie",
        "documentation": {}
    },
    {
        "label": "delete_movie",
        "importPath": "project.movie",
        "description": "project.movie",
        "isExtraImport": true,
        "detail": "project.movie",
        "documentation": {}
    },
    {
        "label": "get_all_movies",
        "importPath": "project.movie",
        "description": "project.movie",
        "isExtraImport": true,
        "detail": "project.movie",
        "documentation": {}
    },
    {
        "label": "get_movie_list",
        "importPath": "project.movie",
        "description": "project.movie",
        "isExtraImport": true,
        "detail": "project.movie",
        "documentation": {}
    },
    {
        "label": "seed_movies",
        "importPath": "project.movie",
        "description": "project.movie",
        "isExtraImport": true,
        "detail": "project.movie",
        "documentation": {}
    },
    {
        "label": "create_movie",
        "importPath": "project.movie",
        "description": "project.movie",
        "isExtraImport": true,
        "detail": "project.movie",
        "documentation": {}
    },
    {
        "label": "create_movie",
        "importPath": "project.movie",
        "description": "project.movie",
        "isExtraImport": true,
        "detail": "project.movie",
        "documentation": {}
    },
    {
        "label": "create_relationship",
        "importPath": "project.relationship",
        "description": "project.relationship",
        "isExtraImport": true,
        "detail": "project.relationship",
        "documentation": {}
    },
    {
        "label": "delete_relationship",
        "importPath": "project.relationship",
        "description": "project.relationship",
        "isExtraImport": true,
        "detail": "project.relationship",
        "documentation": {}
    },
    {
        "label": "delete_user_relationships",
        "importPath": "project.relationship",
        "description": "project.relationship",
        "isExtraImport": true,
        "detail": "project.relationship",
        "documentation": {}
    },
    {
        "label": "get_all_relationships",
        "importPath": "project.relationship",
        "description": "project.relationship",
        "isExtraImport": true,
        "detail": "project.relationship",
        "documentation": {}
    },
    {
        "label": "get_relationship",
        "importPath": "project.relationship",
        "description": "project.relationship",
        "isExtraImport": true,
        "detail": "project.relationship",
        "documentation": {}
    },
    {
        "label": "get_user_relationships",
        "importPath": "project.relationship",
        "description": "project.relationship",
        "isExtraImport": true,
        "detail": "project.relationship",
        "documentation": {}
    },
    {
        "label": "create_user",
        "importPath": "project.user",
        "description": "project.user",
        "isExtraImport": true,
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "authenticate_user",
        "importPath": "project.user",
        "description": "project.user",
        "isExtraImport": true,
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "calc_matches",
        "importPath": "project.user",
        "description": "project.user",
        "isExtraImport": true,
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "create_user",
        "importPath": "project.user",
        "description": "project.user",
        "isExtraImport": true,
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "disconnect_user",
        "importPath": "project.user",
        "description": "project.user",
        "isExtraImport": true,
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "get_admin",
        "importPath": "project.user",
        "description": "project.user",
        "isExtraImport": true,
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "get_all_users",
        "importPath": "project.user",
        "description": "project.user",
        "isExtraImport": true,
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "get_user",
        "importPath": "project.user",
        "description": "project.user",
        "isExtraImport": true,
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "get_user_list",
        "importPath": "project.user",
        "description": "project.user",
        "isExtraImport": true,
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "remove_admin",
        "importPath": "project.user",
        "description": "project.user",
        "isExtraImport": true,
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "set_admin",
        "importPath": "project.user",
        "description": "project.user",
        "isExtraImport": true,
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "create_user",
        "importPath": "project.user",
        "description": "project.user",
        "isExtraImport": true,
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "clean_relationships",
        "importPath": "tests.factories.relationships.clean_relationships",
        "description": "tests.factories.relationships.clean_relationships",
        "isExtraImport": true,
        "detail": "tests.factories.relationships.clean_relationships",
        "documentation": {}
    },
    {
        "label": "create_preference",
        "importPath": "project.preference",
        "description": "project.preference",
        "isExtraImport": true,
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "calc_movie_weight",
        "importPath": "project.preference",
        "description": "project.preference",
        "isExtraImport": true,
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "create_preference",
        "importPath": "project.preference",
        "description": "project.preference",
        "isExtraImport": true,
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "delete_movie_preferences",
        "importPath": "project.preference",
        "description": "project.preference",
        "isExtraImport": true,
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "delete_preference",
        "importPath": "project.preference",
        "description": "project.preference",
        "isExtraImport": true,
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "delete_user_preferences",
        "importPath": "project.preference",
        "description": "project.preference",
        "isExtraImport": true,
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "get_all_preferences",
        "importPath": "project.preference",
        "description": "project.preference",
        "isExtraImport": true,
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "get_movie_preferences",
        "importPath": "project.preference",
        "description": "project.preference",
        "isExtraImport": true,
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "get_user_preferences",
        "importPath": "project.preference",
        "description": "project.preference",
        "isExtraImport": true,
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "clean_users_movies_preferences",
        "importPath": "tests.factories.preferences.clean_preferences",
        "description": "tests.factories.preferences.clean_preferences",
        "isExtraImport": true,
        "detail": "tests.factories.preferences.clean_preferences",
        "documentation": {}
    },
    {
        "label": "clean_users_movies_preferences",
        "importPath": "tests.factories.preferences.clean_preferences",
        "description": "tests.factories.preferences.clean_preferences",
        "isExtraImport": true,
        "detail": "tests.factories.preferences.clean_preferences",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "project.auth",
        "description": "project.auth",
        "peekOfCode": "def login():\n    \"\"\"\n    Rota para a página de login.\n    Return:\n        render_template: Página login.html.\n    \"\"\"\n    if current_user.is_authenticated:\n        flash('You are already authenticated, logout first to access this page.')\n        return redirect(url_for('main.profile'))\n    if request.method == 'POST':",
        "detail": "project.auth",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "project.auth",
        "description": "project.auth",
        "peekOfCode": "def signup():\n    \"\"\"\n    Rota para a página de cadastro.\n    Return:\n        render_template: Página signup.html.\n    \"\"\"\n    if current_user.is_authenticated:\n        flash('You are already authenticated, logout first to access this page.')\n        return redirect(url_for('main.profile'))\n    if request.method == 'POST':",
        "detail": "project.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "project.auth",
        "description": "project.auth",
        "peekOfCode": "def logout():\n    \"\"\"\n    Rota para realizar o logout.\n    Return:\n        redirect: Redireciona para a página inicial.\n    \"\"\"\n    if not current_user.is_authenticated:\n        flash('Please, authenticate to access this page.')\n        return redirect(url_for('auth.login'))\n    disconnect_user(current_user)",
        "detail": "project.auth",
        "documentation": {}
    },
    {
        "label": "auth",
        "kind": 5,
        "importPath": "project.auth",
        "description": "project.auth",
        "peekOfCode": "auth = Blueprint('auth', __name__)\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nFunção: login()\nAssertivas de Entrada:\nNenhuma especifíca\nAssertivas de Saída:\nSe o Usuário está Autenticado\n    Redireciona para a página principal\nSenão\n    É renderizada a página de login",
        "detail": "project.auth",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "project.db",
        "description": "project.db",
        "peekOfCode": "class User(db.Model, UserMixin):\n    \"\"\"Classe para representar um usuário.\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    \"\"\"\n    id (int): ID do usuário.\n    \"\"\"\n    email = db.Column(db.String(100), unique=True)\n    \"\"\"\n    email (str): E-mail do usuário.\n    \"\"\"",
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "Admin",
        "kind": 6,
        "importPath": "project.db",
        "description": "project.db",
        "peekOfCode": "class Admin(db.Model):\n    \"\"\"Classe responsável pelos usuários administradores.\"\"\"\n    uid = db.Column(db.Integer, ForeignKey('user.id'), primary_key=True)\n    \"\"\"\n    uid (int): ID do usuário admin.\n    \"\"\"\n    user = db.relationship(\n        'User',\n        backref=db.backref(\n            'Admin',",
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "Movie",
        "kind": 6,
        "importPath": "project.db",
        "description": "project.db",
        "peekOfCode": "class Movie(db.Model):\n    \"\"\"Dados que representam informações sobre os filmes\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    \"\"\"\n    id (int): ID do filme (chave primária).\n    \"\"\"\n    name = db.Column(db.String(100))\n    \"\"\"\n    name (str): Nome do filme.\n    \"\"\"",
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "Preference",
        "kind": 6,
        "importPath": "project.db",
        "description": "project.db",
        "peekOfCode": "class Preference(db.Model):\n    \"\"\"Classe que representa as preferências dos usuários em relação aos filmes.\"\"\"\n    uid = db.Column(db.Integer, db.ForeignKey('user.id'), primary_key=True)\n    \"\"\"\n    uid (int): ID do usuário (chave primária composta).\n    \"\"\"\n    mid = db.Column(db.Integer, db.ForeignKey('movie.id'), primary_key=True)\n    \"\"\"\n    mid (int): ID do filme (chave primária composta).\n    \"\"\"",
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "Relationship",
        "kind": 6,
        "importPath": "project.db",
        "description": "project.db",
        "peekOfCode": "class Relationship(db.Model):\n    \"\"\"Classe que representa os relacionamentos entre os usuários.\"\"\"\n    uid_1 = db.Column(db.Integer, db.ForeignKey('user.id'), primary_key=True)\n    \"\"\"\n    uid_1 (int): ID do primeiro usuário no relacionamento (chave primária composta).\n    \"\"\"\n    uid_2 = db.Column(db.Integer, db.ForeignKey('user.id'), primary_key=True)\n    \"\"\"\n    uid_2 (int): ID do segundo usuário no relacionamento (chave primária composta).\n    \"\"\"",
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "Messages",
        "kind": 6,
        "importPath": "project.db",
        "description": "project.db",
        "peekOfCode": "class Messages(db.Model):\n    \"\"\"Classe que representa as mensagens.\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    \"\"\"\n    id (int): ID da mensagem (chave primária).\n    \"\"\"\n    date = db.Column(db.Date)\n    \"\"\"\n    date (Date): Data da mensagem.\n    \"\"\"",
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "UserMessages",
        "kind": 6,
        "importPath": "project.db",
        "description": "project.db",
        "peekOfCode": "class UserMessages(db.Model):\n    \"\"\"Classe que representa as mensagens trocadas entre usuários.\"\"\"\n    sender = db.Column(db.Integer, db.ForeignKey('user.id'), primary_key=True)\n    \"\"\"\n    sender (int): ID do remetente da mensagem (chave primária composta).\n    \"\"\"\n    receiver = db.Column(db.Integer, db.ForeignKey('user.id'), primary_key=True)\n    \"\"\"\n    receiver (int): ID do destinatário da mensagem (chave primária composta).\n    \"\"\"",
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "db_commit",
        "kind": 2,
        "importPath": "project.db",
        "description": "project.db",
        "peekOfCode": "def db_commit():\n    \"\"\"\n    Realiza o commit das alterações no banco de dados.\n    \"\"\"\n    db.session.commit()\ndef db_add(item):\n    \"\"\"\n    Adiciona um item no banco de dados.\n    Parâmetros:\n        item: Item a ser adicionado no banco de dados.",
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "db_add",
        "kind": 2,
        "importPath": "project.db",
        "description": "project.db",
        "peekOfCode": "def db_add(item):\n    \"\"\"\n    Adiciona um item no banco de dados.\n    Parâmetros:\n        item: Item a ser adicionado no banco de dados.\n    \"\"\"\n    db.session.add(item)\ndef db_del(item):\n    \"\"\"\n    Deleta um item do banco de dados.",
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "db_del",
        "kind": 2,
        "importPath": "project.db",
        "description": "project.db",
        "peekOfCode": "def db_del(item):\n    \"\"\"\n    Deleta um item do banco de dados.\n    Parâmetros:\n        item: Item a ser deletado do banco de dados.\n    \"\"\"\n    db.session.delete(item)\ndef clean_db():\n    \"\"\"\n    Exclui todos os registros das tabelas no banco de dados.",
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "clean_db",
        "kind": 2,
        "importPath": "project.db",
        "description": "project.db",
        "peekOfCode": "def clean_db():\n    \"\"\"\n    Exclui todos os registros das tabelas no banco de dados.\n    \"\"\"\n    User.query.delete()\n    Movie.query.delete()\n    Messages.query.delete()\n    Admin.query.delete()\n    UserMessages.query.delete()\n    Preference.query.delete()",
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "project.db",
        "description": "project.db",
        "peekOfCode": "db = SQLAlchemy()\nclass User(db.Model, UserMixin):\n    \"\"\"Classe para representar um usuário.\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    \"\"\"\n    id (int): ID do usuário.\n    \"\"\"\n    email = db.Column(db.String(100), unique=True)\n    \"\"\"\n    email (str): E-mail do usuário.",
        "detail": "project.db",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "project.main",
        "description": "project.main",
        "peekOfCode": "def index():\n    \"\"\"\n    Rota para a página inicial.\n    Return:\n        render_template: Página index.html.\n    \"\"\"\n    return render_template('index.html')\n@main.route('/profile', methods=['GET', 'POST'])\ndef profile():\n    \"\"\"",
        "detail": "project.main",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "project.main",
        "description": "project.main",
        "peekOfCode": "def profile():\n    \"\"\"\n    Rota para a página de perfil do usuário.\n    Return:\n        render_template: Página profile.html.\n    \"\"\"\n    if not current_user.is_authenticated:\n        flash('Please, authenticate to access this page.')\n        return redirect(url_for('auth.login'))\n    if request.method == 'POST':",
        "detail": "project.main",
        "documentation": {}
    },
    {
        "label": "movies",
        "kind": 2,
        "importPath": "project.main",
        "description": "project.main",
        "peekOfCode": "def movies():\n    \"\"\"\n    Rota para a página de filmes.\n    Return:\n        render_template: Página movies.html.\n    \"\"\"\n    privileged = False\n    preferences = None\n    if current_user.is_authenticated:\n        privileged = is_admin(current_user.id)",
        "detail": "project.main",
        "documentation": {}
    },
    {
        "label": "favicon",
        "kind": 2,
        "importPath": "project.main",
        "description": "project.main",
        "peekOfCode": "def favicon():\n    \"\"\"\n    Rota para acessar o arquivo favicon.ico.\n    Return:\n        send_from_directory: Arquivo favicon.ico.\n    \"\"\"\n    return send_from_directory('static','favicon.ico')\n@main.route('/test')\ndef test():\n    \"\"\"",
        "detail": "project.main",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "project.main",
        "description": "project.main",
        "peekOfCode": "def test():\n    \"\"\"\n    Rota para a página de testes.\n    Return:\n        redirect: Página index.html.\n    \"\"\"\n    if not current_user.is_authenticated:\n        print(get_all_users())\n        print(get_all_movies())\n        print(get_all_preferences())",
        "detail": "project.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 5,
        "importPath": "project.main",
        "description": "project.main",
        "peekOfCode": "main = Blueprint('main', __name__)\n@main.route('/')\ndef index():\n    \"\"\"\n    Rota para a página inicial.\n    Return:\n        render_template: Página index.html.\n    \"\"\"\n    return render_template('index.html')\n@main.route('/profile', methods=['GET', 'POST'])",
        "detail": "project.main",
        "documentation": {}
    },
    {
        "label": "get_all_movies",
        "kind": 2,
        "importPath": "project.movie",
        "description": "project.movie",
        "peekOfCode": "def get_all_movies():\n    \"\"\"\n    Retorna uma lista com todos os filmes existentes no banco de dados.\n    Return:\n        movies: Lista de filmes.\n    \"\"\"\n    movies = Movie.query.all()\n    return movies\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nFunção: get_movie(name)",
        "detail": "project.movie",
        "documentation": {}
    },
    {
        "label": "get_movie",
        "kind": 2,
        "importPath": "project.movie",
        "description": "project.movie",
        "peekOfCode": "def get_movie(name):\n    \"\"\"\n    Retorna o filme correspondente ao nome fornecido.\n    Parâmetros:\n        name: Nome do filme.\n    Returns:\n        movie: Objeto do filme encontrado ou None.\n    \"\"\"\n    movie = Movie.query.filter_by(name=name).first()\n    return movie",
        "detail": "project.movie",
        "documentation": {}
    },
    {
        "label": "get_movie_list",
        "kind": 2,
        "importPath": "project.movie",
        "description": "project.movie",
        "peekOfCode": "def get_movie_list(movie_list):\n    \"\"\"\n    Retorna uma lista de filmes com base em uma lista de IDs.\n    Parâmetros:\n        movie_list: Lista de IDs dos filmes.\n    Returns:\n        movies: Lista de filmes encontrados.\n    \"\"\"\n    movies = []\n    for mid in movie_list:",
        "detail": "project.movie",
        "documentation": {}
    },
    {
        "label": "movie_exists",
        "kind": 2,
        "importPath": "project.movie",
        "description": "project.movie",
        "peekOfCode": "def movie_exists(name):\n    \"\"\"\n    Verifica se um filme com o nome fornecido existe no banco de dados.\n    Parâmetros:\n        name: Nome do filme a ser verificado.\n    Return:\n        bool: True se o filme existe, False caso contrário.\n    \"\"\"\n    return bool(get_movie(name))\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"",
        "detail": "project.movie",
        "documentation": {}
    },
    {
        "label": "create_movie",
        "kind": 2,
        "importPath": "project.movie",
        "description": "project.movie",
        "peekOfCode": "def create_movie(name, image_url):\n    \"\"\"\n    Cria um novo filme no banco de dados.\n    Parâmetros:\n        name: Nome do novo filme.\n        image_url: URL da imagem do novo filme.\n    Return:\n        movie: Objeto do filme criado ou None.\n    \"\"\"\n    if movie_exists(name):",
        "detail": "project.movie",
        "documentation": {}
    },
    {
        "label": "delete_movie",
        "kind": 2,
        "importPath": "project.movie",
        "description": "project.movie",
        "peekOfCode": "def delete_movie(name):\n    \"\"\"\n    Deleta um filme do banco de dados.\n    Parâmetros:\n        name: Nome do filme a ser deletado.\n    \"\"\"\n    movie = get_movie(name)\n    if movie:\n        db_del(movie)\n        db_commit()",
        "detail": "project.movie",
        "documentation": {}
    },
    {
        "label": "generate_random_movie_name",
        "kind": 2,
        "importPath": "project.movie",
        "description": "project.movie",
        "peekOfCode": "def generate_random_movie_name():\n    \"\"\"\n    Gera um nome de filme aleatório.\n    Return:\n        random_name: Nome de filme aleatório.\n    \"\"\"\n    i = randint(1, 300)\n    return f\"Filme {i}\"\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nFunção: seed_movies()",
        "detail": "project.movie",
        "documentation": {}
    },
    {
        "label": "seed_movies",
        "kind": 2,
        "importPath": "project.movie",
        "description": "project.movie",
        "peekOfCode": "def seed_movies():\n    \"\"\"\n    Popula o banco de dados com filmes.\n    \"\"\"\n    for i in range(10):\n        movie_name = f\"Filme {i}\"\n        if movie_exists(movie_name):\n            random_name = generate_random_movie_name()\n            while movie_exists(random_name):\n                random_name = generate_random_movie_name()",
        "detail": "project.movie",
        "documentation": {}
    },
    {
        "label": "get_movie_weight",
        "kind": 2,
        "importPath": "project.movie",
        "description": "project.movie",
        "peekOfCode": "def get_movie_weight(mid):\n    \"\"\"\n    Retorna o peso do filme com base no ID fornecido.\n    Parâmetros:\n        mid: ID do filme.\n    Return:\n        weight: Peso do filme.\n    \"\"\"\n    movie = Movie.query.filter_by(id=mid).first()\n    if movie:",
        "detail": "project.movie",
        "documentation": {}
    },
    {
        "label": "update_movie_weight",
        "kind": 2,
        "importPath": "project.movie",
        "description": "project.movie",
        "peekOfCode": "def update_movie_weight(mid, weight):\n    \"\"\"\n    Atualiza o peso do filme com base no ID fornecido.\n    Parâmetros:\n        mid: ID do filme.\n        weight: Novo peso do filme.\n    \"\"\"\n    movie = Movie.query.filter_by(id=mid).first()\n    if movie:\n        movie.weight = weight",
        "detail": "project.movie",
        "documentation": {}
    },
    {
        "label": "update_movie_score",
        "kind": 2,
        "importPath": "project.movie",
        "description": "project.movie",
        "peekOfCode": "def update_movie_score(mid, score):\n    \"\"\"\n    Atualiza a pontuação do filme com base no ID fornecido.\n    Parâmetros:\n        mid: ID do filme.\n        score: Pontuação a ser adicionada ao filme.\n    \"\"\"\n    movie = Movie.query.filter_by(id=mid).first()\n    if movie:\n        movie.score += score",
        "detail": "project.movie",
        "documentation": {}
    },
    {
        "label": "movie.weight",
        "kind": 5,
        "importPath": "project.movie",
        "description": "project.movie",
        "peekOfCode": "movie.weight = weight\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ndef update_movie_weight(mid, weight):\n    \"\"\"\n    Atualiza o peso do filme com base no ID fornecido.\n    Parâmetros:\n        mid: ID do filme.\n        weight: Novo peso do filme.\n    \"\"\"\n    movie = Movie.query.filter_by(id=mid).first()",
        "detail": "project.movie",
        "documentation": {}
    },
    {
        "label": "get_all_preferences",
        "kind": 2,
        "importPath": "project.preference",
        "description": "project.preference",
        "peekOfCode": "def get_all_preferences():\n    \"\"\"\n    Retorna uma lista com todas as preferências existentes no banco de dados.\n    Return:\n        preferences: Lista de preferências.\n    \"\"\"\n    preferences = Preference.query.all()\n    return preferences\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nFunção: get_preference(uid,mid)",
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "get_preference",
        "kind": 2,
        "importPath": "project.preference",
        "description": "project.preference",
        "peekOfCode": "def get_preference(uid, mid):\n    \"\"\"\n    Retorna a preferência correspondente ao usuário e filme fornecidos.\n    Parâmetros:\n        uid: ID do usuário.\n        mid: ID do filme.\n    Return:\n        preference: Objeto da preferência encontrada ou None.\n    \"\"\"\n    preference = Preference.query.filter_by(uid=uid, mid=mid).first()",
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "get_user_preferences",
        "kind": 2,
        "importPath": "project.preference",
        "description": "project.preference",
        "peekOfCode": "def get_user_preferences(uid):\n    \"\"\"\n    Retorna uma lista de filmes preferidos pelo usuário fornecido.\n    Parâmetros:\n        uid: ID do usuário.\n    Return:\n        user_preferences: Lista de IDs dos filmes preferidos pelo usuário.\n    \"\"\"\n    preferences = Preference.query.filter_by(uid=uid)\n    user_preferences = []",
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "get_movie_preferences",
        "kind": 2,
        "importPath": "project.preference",
        "description": "project.preference",
        "peekOfCode": "def get_movie_preferences(mid):\n    \"\"\"\n    Retorna uma lista de usuários que preferiram o filme fornecido.\n    Parâmetros:\n        mid: ID do filme.\n    Return:\n        movie_preferences: Lista de IDs dos usuários que preferiram o filme.\n    \"\"\"\n    preferences = Preference.query.filter_by(mid=mid)\n    movie_preferences = []",
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "preference_exists",
        "kind": 2,
        "importPath": "project.preference",
        "description": "project.preference",
        "peekOfCode": "def preference_exists(uid, mid):\n    \"\"\"\n    Verifica se existe uma preferência do usuário pelo filme fornecidos.\n    Parâmetros:\n        uid: ID do usuário.\n        mid: ID do filme.\n    Return:\n        bool: True se a preferência existe, False caso contrário.\n    \"\"\"\n    return bool(get_preference(uid, mid))",
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "create_preference",
        "kind": 2,
        "importPath": "project.preference",
        "description": "project.preference",
        "peekOfCode": "def create_preference(uid, mid):\n    \"\"\"\n    Cria uma nova preferência de um usuário por um filme.\n    Parâmetros:\n        uid: ID do usuário.\n        mid: ID do filme.\n    Return:\n        preference: Objeto da preferência criada ou None.\n    \"\"\"\n    if preference_exists(uid, mid):",
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "delete_preference",
        "kind": 2,
        "importPath": "project.preference",
        "description": "project.preference",
        "peekOfCode": "def delete_preference(uid, mid):\n    \"\"\"\n    Deleta a preferência do usuário pelo filme.\n    Parameters:\n        uid: ID do usuário.\n        mid: ID do filme.\n    \"\"\"\n    preference = get_preference(uid, mid)\n    if preference:\n        db_del(preference)",
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "delete_user_preferences",
        "kind": 2,
        "importPath": "project.preference",
        "description": "project.preference",
        "peekOfCode": "def delete_user_preferences(uid):\n    \"\"\"\n    Deleta a preferência do usuário pelo filme.\n    Parâmetros:\n        uid: ID do usuário.\n        mid: ID do filme.\n    \"\"\"\n    preferences = get_user_preferences(uid)\n    if preferences:\n        for mid in preferences:",
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "delete_movie_preferences",
        "kind": 2,
        "importPath": "project.preference",
        "description": "project.preference",
        "peekOfCode": "def delete_movie_preferences(mid):\n    \"\"\"\n    Deleta todas as preferências do usuário.\n    Parâmetros:\n        uid: ID do usuário.\n    \"\"\"\n    preferences = get_movie_preferences(mid)\n    if preferences:\n        for uid in preferences:\n            delete_preference(uid, mid)",
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "calc_movie_weight",
        "kind": 2,
        "importPath": "project.preference",
        "description": "project.preference",
        "peekOfCode": "def calc_movie_weight(mid):\n    \"\"\"\n    Calcula o peso de um filme com base nas preferências.\n    Parâmetros:\n        mid: ID do filme.\n    Return:\n        weight: Peso do filme.\n    \"\"\"\n    preferences = len(get_all_preferences())\n    movie_preferences = len(get_movie_preferences(mid))",
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "update_movie",
        "kind": 2,
        "importPath": "project.preference",
        "description": "project.preference",
        "peekOfCode": "def update_movie(mid, score):\n    \"\"\"\n    Atualiza as informações de peso e pontuação do filme.\n    Parâmetros:\n        mid: ID do filme.\n        score: Pontuação a ser adicionada ao filme.\n    \"\"\"\n    preferences = get_all_preferences()\n    for preference in preferences:\n        update_movie_weight(preference.mid, calc_movie_weight(preference.mid))",
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "movie.id",
        "kind": 5,
        "importPath": "project.preference",
        "description": "project.preference",
        "peekOfCode": "movie.id = id únicos\nAssertivas de Saída:\nSe preference_exists(uid,mid) == True\n    Retorna None\nSenão\n    É criado um objeto 'Preference' com atribuitos uid e mid\n    O banco de dados é atualizado com o objeto\n    É atríbuido peso 1 ao filme\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\ndef create_preference(uid, mid):",
        "detail": "project.preference",
        "documentation": {}
    },
    {
        "label": "get_all_relationships",
        "kind": 2,
        "importPath": "project.relationship",
        "description": "project.relationship",
        "peekOfCode": "def get_all_relationships():\n    \"\"\"\n    Retorna uma lista com todos os relacionamentos.\n    Return:\n        relationships: Lista de relacionamentos.\n    \"\"\"\n    relationships = Relationship.query.all()\n    return relationships\ndef get_relationship(uid_1, uid_2):\n    \"\"\"",
        "detail": "project.relationship",
        "documentation": {}
    },
    {
        "label": "get_relationship",
        "kind": 2,
        "importPath": "project.relationship",
        "description": "project.relationship",
        "peekOfCode": "def get_relationship(uid_1, uid_2):\n    \"\"\"\n    Retorna o relacionamento entre os dois usuários fornecidos.\n    Parâmetros:\n        uid_1: ID do primeiro usuário.\n        uid_2: ID do segundo usuário.\n    Return:\n        relationship: Objeto do relacionamento encontrado ou None.\n    \"\"\"\n    relationship = Relationship.query.filter_by(uid_1=uid_1, uid_2=uid_2).first()",
        "detail": "project.relationship",
        "documentation": {}
    },
    {
        "label": "get_user_relationships",
        "kind": 2,
        "importPath": "project.relationship",
        "description": "project.relationship",
        "peekOfCode": "def get_user_relationships(uid):\n    \"\"\"\n    Retorna uma lista de IDs dos usuários relacionados ao usuário fornecido.\n    Parâmetros:\n        uid: ID do usuário.\n    Return:\n        relationships: Lista de IDs dos usuários relacionados.\n    \"\"\"\n    rel_1 = Relationship.query.filter_by(uid_1=uid)\n    rel_2 = Relationship.query.filter_by(uid_2=uid)",
        "detail": "project.relationship",
        "documentation": {}
    },
    {
        "label": "relationship_exists",
        "kind": 2,
        "importPath": "project.relationship",
        "description": "project.relationship",
        "peekOfCode": "def relationship_exists(uid_1, uid_2):\n    \"\"\"\n    Verifica se existe um relacionamento entre os dois usuários fornecidos.\n    Parâmetros:\n        uid_1: ID do primeiro usuário.\n        uid_2: ID do segundo usuário.\n    Return:\n        bool: True se o relacionamento existe, False caso contrário.\n    \"\"\"\n    return bool(get_relationship(uid_1, uid_2))",
        "detail": "project.relationship",
        "documentation": {}
    },
    {
        "label": "create_relationship",
        "kind": 2,
        "importPath": "project.relationship",
        "description": "project.relationship",
        "peekOfCode": "def create_relationship(uid_1, uid_2):\n    \"\"\"\n    Cria um novo relacionamento entre os dois usuários fornecidos.\n    Parâmetros:\n        uid_1: ID do primeiro usuário.\n        uid_2: ID do segundo usuário.\n    Return:\n        relationship: Objeto do relacionamento criado ou None.\n    \"\"\"\n    if relationship_exists(uid_1, uid_2):",
        "detail": "project.relationship",
        "documentation": {}
    },
    {
        "label": "delete_relationship",
        "kind": 2,
        "importPath": "project.relationship",
        "description": "project.relationship",
        "peekOfCode": "def delete_relationship(uid_1, uid_2):\n    \"\"\"\n    Deleta o relacionamento entre os dois usuários fornecidos.\n    Parâmetros:\n        uid_1: ID do primeiro usuário.\n        uid_2: ID do segundo usuário.\n    \"\"\"\n    relationship = get_relationship(uid_1, uid_2)\n    if relationship:\n        db_del(relationship)",
        "detail": "project.relationship",
        "documentation": {}
    },
    {
        "label": "delete_user_relationships",
        "kind": 2,
        "importPath": "project.relationship",
        "description": "project.relationship",
        "peekOfCode": "def delete_user_relationships(uid):\n    \"\"\"\n    Deleta todos os relacionamentos do usuário fornecido.\n    Parâmetros:\n        uid: ID do usuário.\n    \"\"\"\n    relationships = get_user_relationships(uid)\n    if relationships:\n        for uid_2 in relationships:\n            db_del(get_relationship(uid, uid_2))",
        "detail": "project.relationship",
        "documentation": {}
    },
    {
        "label": "update_status",
        "kind": 2,
        "importPath": "project.relationship",
        "description": "project.relationship",
        "peekOfCode": "def update_status(uid_1, uid_2):\n    \"\"\"update_status\"\"\"\n    relationship = get_relationship(uid_1, uid_2)\n    if relationship:\n        relationship.status = True\n        db_commit()",
        "detail": "project.relationship",
        "documentation": {}
    },
    {
        "label": "get_all_users",
        "kind": 2,
        "importPath": "project.user",
        "description": "project.user",
        "peekOfCode": "def get_all_users():\n    \"\"\"Retorna uma lista com todos os usuários.\"\"\"\n    users = User.query.all()\n    return users\ndef get_user(email):\n    \"\"\"\n    Retorna o usuário correspondente ao email fornecido.\n    Parâmetros:\n        email: E-mail do usuário a ser buscado.\n    Returns:",
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "project.user",
        "description": "project.user",
        "peekOfCode": "def get_user(email):\n    \"\"\"\n    Retorna o usuário correspondente ao email fornecido.\n    Parâmetros:\n        email: E-mail do usuário a ser buscado.\n    Returns:\n        user: Objeto do usuário encontrado ou None.\n    \"\"\"\n    user = User.query.filter_by(email=email).first()\n    return user",
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "get_user_list",
        "kind": 2,
        "importPath": "project.user",
        "description": "project.user",
        "peekOfCode": "def get_user_list(user_list):\n    \"\"\"\n    Retorna uma lista de usuários com base em uma lista de IDs.\n    Parâmetros:\n        user_list: Lista de IDs dos usuários.\n    Return:\n        users: Lista de usuários encontrados.\n    \"\"\"\n    users = []\n    for uid in user_list:",
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "user_exists",
        "kind": 2,
        "importPath": "project.user",
        "description": "project.user",
        "peekOfCode": "def user_exists(email):\n    \"\"\"\n    Verifica se um usuário com o e-mail fornecido existe.\n    Parâmetros:\n        email: E-mail do usuário a ser verificado.\n    Return:\n        bool: True se o usuário existe, False caso contrário.\n    \"\"\"\n    return bool(get_user(email))\ndef create_user(email, username, password):",
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "project.user",
        "description": "project.user",
        "peekOfCode": "def create_user(email, username, password):\n    \"\"\"\n    Cria um novo usuário no banco de dados.\n    Parameters:\n        email: E-mail do novo usuário.\n        username: Nome de usuário do novo usuário.\n        password: Senha do novo usuário.\n    Returns:\n        user: Objeto do usuário criado ou None.\n    \"\"\"",
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "delete_user",
        "kind": 2,
        "importPath": "project.user",
        "description": "project.user",
        "peekOfCode": "def delete_user(email):\n    \"\"\"\n    Deleta um usuário do banco de dados.\n    Parâmetros:\n        email: E-mail do usuário a ser deletado.\n    \"\"\"\n    user = get_user(email)\n    if user:\n        db_del(user)\n        db_commit()",
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "authenticate_user",
        "kind": 2,
        "importPath": "project.user",
        "description": "project.user",
        "peekOfCode": "def authenticate_user(email, password):\n    \"\"\"\n    Realiza a autenticação um usuário com base no e-mail e senha fornecidos.\n    Parâmetros:\n        email: E-mail do usuário a ser autenticado.\n        password: Senha do usuário a ser autenticado.\n    Return:\n        user: Objeto do usuário autenticado ou None.\n    \"\"\"\n    user = get_user(email)",
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "disconnect_user",
        "kind": 2,
        "importPath": "project.user",
        "description": "project.user",
        "peekOfCode": "def disconnect_user(user):\n    \"\"\"\n    Desconecta um usuário do sistema.\n    Parâmetros:\n        user: Objeto do usuário a ser desconectado.\n    \"\"\"\n    if user and user_exists(user.email):\n        user.authenticated = False\n        db_commit()\ndef update_email(user, email):",
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "update_email",
        "kind": 2,
        "importPath": "project.user",
        "description": "project.user",
        "peekOfCode": "def update_email(user, email):\n    \"\"\"update_email\"\"\"\n    if get_user(email):\n        return None\n    user.email = email\n    db_commit()\n    return user\ndef update_username(user, username):\n    \"\"\"update_username\"\"\"\n    user.username = username",
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "update_username",
        "kind": 2,
        "importPath": "project.user",
        "description": "project.user",
        "peekOfCode": "def update_username(user, username):\n    \"\"\"update_username\"\"\"\n    user.username = username\n    db_commit()\n    return user\ndef update_password(user, password):\n    \"\"\"update_password\"\"\"\n    hashed = generate_password_hash(password, method='sha256')\n    user.password = hashed\n    db_commit()",
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "update_password",
        "kind": 2,
        "importPath": "project.user",
        "description": "project.user",
        "peekOfCode": "def update_password(user, password):\n    \"\"\"update_password\"\"\"\n    hashed = generate_password_hash(password, method='sha256')\n    user.password = hashed\n    db_commit()\n    return user\ndef get_admin(uid):\n    \"\"\"\n    Retorna o objeto de administração associado ao ID do usuário fornecido.\n    Parâmetros:",
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "get_admin",
        "kind": 2,
        "importPath": "project.user",
        "description": "project.user",
        "peekOfCode": "def get_admin(uid):\n    \"\"\"\n    Retorna o objeto de administração associado ao ID do usuário fornecido.\n    Parâmetros:\n        uid: ID do usuário.\n    Return:\n        admin: Objeto de administração ou None.\n    \"\"\"\n    admin = Admin.query.filter_by(uid=uid).first()\n    return admin",
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "is_admin",
        "kind": 2,
        "importPath": "project.user",
        "description": "project.user",
        "peekOfCode": "def is_admin(uid):\n    \"\"\"\n    Verifica se o usuário com o ID fornecido é um administrador.\n    Parâmetros:\n        uid: ID do usuário a ser verificado.\n    Return:\n        bool: True se o usuário é um administrador, False caso contrário.\n    \"\"\"\n    return bool(get_admin(uid))\ndef set_admin(uid):",
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "set_admin",
        "kind": 2,
        "importPath": "project.user",
        "description": "project.user",
        "peekOfCode": "def set_admin(uid):\n    \"\"\"\n    Define o usuário com o ID fornecido como administrador.\n    Parâmetros:\n        uid: ID do usuário a ser definido como administrador.\n    Return:\n        admin: Objeto de administração criado ou None.\n    \"\"\"\n    if is_admin(uid):\n        return None",
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "remove_admin",
        "kind": 2,
        "importPath": "project.user",
        "description": "project.user",
        "peekOfCode": "def remove_admin(uid):\n    \"\"\"\n    Remove a atribuição de administrador do usuário com o ID fornecido.\n    Parâmetros:\n        uid: ID do usuário a ter a atribuição de administrador removida.\n    \"\"\"\n    admin = get_admin(uid)\n    if admin:\n        db_del(admin)\n        db_commit()",
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "sort_matches",
        "kind": 2,
        "importPath": "project.user",
        "description": "project.user",
        "peekOfCode": "def sort_matches(user):\n    \"\"\"\n    Função chave para ordenar os resultados de acordo com as correspondências do usuário.\n    Parâmetros:\n        user: Par ID do usuário e Pontuação de correspondência.\n    Return:\n        user[1]: Valor usado para classificar as correspondências.\n    \"\"\"\n    return user[1]\ndef calc_matches(uid):",
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "calc_matches",
        "kind": 2,
        "importPath": "project.user",
        "description": "project.user",
        "peekOfCode": "def calc_matches(uid):\n    \"\"\"\n    Calcula as correspondências entre um usuário e outros usuários com base em suas preferências.\n    Parâmetros:\n        uid: ID do usuário.\n    Return:\n        recommendations: Lista de correspondências ordenadas por pontuação.\n    \"\"\"\n    user_preferences = get_user_preferences(uid)\n    user_relationships = get_user_relationships(uid)",
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "get_relationship_lists",
        "kind": 2,
        "importPath": "project.user",
        "description": "project.user",
        "peekOfCode": "def get_relationship_lists(uid):\n    \"\"\"get_relationship_lists\"\"\"\n    relationships = get_user_relationships(uid)\n    friends = []\n    pending = []\n    requests = []\n    for user in relationships:\n        relationship = get_relationship(uid, user)\n        if relationship.status:\n            friends.append(User.query.filter_by(id=user).first())",
        "detail": "project.user",
        "documentation": {}
    },
    {
        "label": "clean_movies",
        "kind": 2,
        "importPath": "tests.factories.movies.clean_movies",
        "description": "tests.factories.movies.clean_movies",
        "peekOfCode": "def clean_movies():\n    Movie.query.delete()\n    db_commit()",
        "detail": "tests.factories.movies.clean_movies",
        "documentation": {}
    },
    {
        "label": "clean_preferences",
        "kind": 2,
        "importPath": "tests.factories.preferences.clean_preferences",
        "description": "tests.factories.preferences.clean_preferences",
        "peekOfCode": "def clean_preferences():\n    Preference.query.delete()\n    db_commit()\ndef clean_users_movies_preferences():\n    clean_preferences()\n    clean_movies()\n    clean_users()",
        "detail": "tests.factories.preferences.clean_preferences",
        "documentation": {}
    },
    {
        "label": "clean_users_movies_preferences",
        "kind": 2,
        "importPath": "tests.factories.preferences.clean_preferences",
        "description": "tests.factories.preferences.clean_preferences",
        "peekOfCode": "def clean_users_movies_preferences():\n    clean_preferences()\n    clean_movies()\n    clean_users()",
        "detail": "tests.factories.preferences.clean_preferences",
        "documentation": {}
    },
    {
        "label": "clean_relationships",
        "kind": 2,
        "importPath": "tests.factories.relationships.clean_relationships",
        "description": "tests.factories.relationships.clean_relationships",
        "peekOfCode": "def clean_relationships():\n    Relationship.query.delete()\n    db_commit()",
        "detail": "tests.factories.relationships.clean_relationships",
        "documentation": {}
    },
    {
        "label": "clean_users",
        "kind": 2,
        "importPath": "tests.factories.users.clean_users",
        "description": "tests.factories.users.clean_users",
        "peekOfCode": "def clean_users():\n    User.query.delete()\n    db_commit()\ndef clean_admins():\n    Admin.query.delete()\n    db_commit()",
        "detail": "tests.factories.users.clean_users",
        "documentation": {}
    },
    {
        "label": "clean_admins",
        "kind": 2,
        "importPath": "tests.factories.users.clean_users",
        "description": "tests.factories.users.clean_users",
        "peekOfCode": "def clean_admins():\n    Admin.query.delete()\n    db_commit()",
        "detail": "tests.factories.users.clean_users",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def app():\n    \"\"\"Instance of main flask app\"\"\"\n    return create_app()",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "test_app_is_created",
        "kind": 2,
        "importPath": "tests.test_1app",
        "description": "tests.test_1app",
        "peekOfCode": "def test_app_is_created(app):\n    assert app.name == 'project'\ndef test_config_is_loaded(config):\n    assert config[\"DEBUG\"] is False\ndef test_fake_request_returns_404(client):\n    assert client.get(\"/fakeUrljustFoRtests\").status_code == 404",
        "detail": "tests.test_1app",
        "documentation": {}
    },
    {
        "label": "test_config_is_loaded",
        "kind": 2,
        "importPath": "tests.test_1app",
        "description": "tests.test_1app",
        "peekOfCode": "def test_config_is_loaded(config):\n    assert config[\"DEBUG\"] is False\ndef test_fake_request_returns_404(client):\n    assert client.get(\"/fakeUrljustFoRtests\").status_code == 404",
        "detail": "tests.test_1app",
        "documentation": {}
    },
    {
        "label": "test_fake_request_returns_404",
        "kind": 2,
        "importPath": "tests.test_1app",
        "description": "tests.test_1app",
        "peekOfCode": "def test_fake_request_returns_404(client):\n    assert client.get(\"/fakeUrljustFoRtests\").status_code == 404",
        "detail": "tests.test_1app",
        "documentation": {}
    },
    {
        "label": "test_create_movie",
        "kind": 2,
        "importPath": "tests.test_2movie",
        "description": "tests.test_2movie",
        "peekOfCode": "def test_create_movie(app):\n    clean_movies()\n    create_movie('name','url')\n    movie = Movie.query.filter_by(name='name').first()\n    assert movie.id == 1 and movie.image_url == 'url' and movie.name == 'name'\ndef test_create_existing_movie(app):\n    result = create_movie('name','url')\n    assert result == None\ndef test_get_all_movies(app):\n    clean_movies()",
        "detail": "tests.test_2movie",
        "documentation": {}
    },
    {
        "label": "test_create_existing_movie",
        "kind": 2,
        "importPath": "tests.test_2movie",
        "description": "tests.test_2movie",
        "peekOfCode": "def test_create_existing_movie(app):\n    result = create_movie('name','url')\n    assert result == None\ndef test_get_all_movies(app):\n    clean_movies()\n    create_movie('name1','url1')\n    create_movie('name2','url2')\n    create_movie('name3','url3')\n    movies = get_all_movies()\n    assert movies[0].id == 1 and movies[1].id == 2 and movies[2].id == 3",
        "detail": "tests.test_2movie",
        "documentation": {}
    },
    {
        "label": "test_get_all_movies",
        "kind": 2,
        "importPath": "tests.test_2movie",
        "description": "tests.test_2movie",
        "peekOfCode": "def test_get_all_movies(app):\n    clean_movies()\n    create_movie('name1','url1')\n    create_movie('name2','url2')\n    create_movie('name3','url3')\n    movies = get_all_movies()\n    assert movies[0].id == 1 and movies[1].id == 2 and movies[2].id == 3\ndef test_get_movie_list(app):\n    movies = get_movie_list([2,3])\n    assert movies[0].id == 2 and movies[1].id == 3",
        "detail": "tests.test_2movie",
        "documentation": {}
    },
    {
        "label": "test_get_movie_list",
        "kind": 2,
        "importPath": "tests.test_2movie",
        "description": "tests.test_2movie",
        "peekOfCode": "def test_get_movie_list(app):\n    movies = get_movie_list([2,3])\n    assert movies[0].id == 2 and movies[1].id == 3\ndef test_delete_movie(app):\n    delete_movie('name2')\n    movies = get_all_movies()\n    moviesNames = []\n    for i in movies:\n        moviesNames.append(i.name)\n    assert 'name2' not in moviesNames",
        "detail": "tests.test_2movie",
        "documentation": {}
    },
    {
        "label": "test_delete_movie",
        "kind": 2,
        "importPath": "tests.test_2movie",
        "description": "tests.test_2movie",
        "peekOfCode": "def test_delete_movie(app):\n    delete_movie('name2')\n    movies = get_all_movies()\n    moviesNames = []\n    for i in movies:\n        moviesNames.append(i.name)\n    assert 'name2' not in moviesNames\ndef test_seed_movies(app):\n    clean_movies()\n    movies = get_all_movies()",
        "detail": "tests.test_2movie",
        "documentation": {}
    },
    {
        "label": "test_seed_movies",
        "kind": 2,
        "importPath": "tests.test_2movie",
        "description": "tests.test_2movie",
        "peekOfCode": "def test_seed_movies(app):\n    clean_movies()\n    movies = get_all_movies()\n    length1 = len(movies)\n    seed_movies()\n    movies2 = get_all_movies()\n    length2 = len(movies2)\n    assert length2 == length1+10\ndef test_seed_random_movies(app):\n    seed_movies()",
        "detail": "tests.test_2movie",
        "documentation": {}
    },
    {
        "label": "test_seed_random_movies",
        "kind": 2,
        "importPath": "tests.test_2movie",
        "description": "tests.test_2movie",
        "peekOfCode": "def test_seed_random_movies(app):\n    seed_movies()\n    movies = get_all_movies()\n    assert len(movies) == 20",
        "detail": "tests.test_2movie",
        "documentation": {}
    },
    {
        "label": "test_create_relationship",
        "kind": 2,
        "importPath": "tests.test_3relationships",
        "description": "tests.test_3relationships",
        "peekOfCode": "def test_create_relationship(app):\n    clean_relationships()\n    user1 = create_user('teste1@gmail.com', 'teste1','senha1')\n    user2 = create_user('teste2@gmail.com', 'teste2','senha2')\n    relationship = create_relationship(user1.id, user2.id)\n    assert relationship.uid_1 == user1.id and relationship.uid_2 == user2.id\ndef test_create_repeated_relationship(app):\n    clean_users()\n    user1 = create_user('teste1@gmail.com', 'teste1','senha1')\n    user2 = create_user('teste2@gmail.com', 'teste2','senha2')",
        "detail": "tests.test_3relationships",
        "documentation": {}
    },
    {
        "label": "test_create_repeated_relationship",
        "kind": 2,
        "importPath": "tests.test_3relationships",
        "description": "tests.test_3relationships",
        "peekOfCode": "def test_create_repeated_relationship(app):\n    clean_users()\n    user1 = create_user('teste1@gmail.com', 'teste1','senha1')\n    user2 = create_user('teste2@gmail.com', 'teste2','senha2')\n    relationship1 = create_relationship(user1.id, user2.id)\n    relationship2 = create_relationship(user1.id, user2.id)\n    assert relationship2 == None\ndef test_get_relationship(app):\n    relationship = get_relationship(1, 2)\n    assert relationship.uid_1 == 1 and relationship.uid_2 == 2",
        "detail": "tests.test_3relationships",
        "documentation": {}
    },
    {
        "label": "test_get_relationship",
        "kind": 2,
        "importPath": "tests.test_3relationships",
        "description": "tests.test_3relationships",
        "peekOfCode": "def test_get_relationship(app):\n    relationship = get_relationship(1, 2)\n    assert relationship.uid_1 == 1 and relationship.uid_2 == 2\ndef test_get_user_relationships(app):\n    user3 = create_user('teste3@gmail.com', 'teste3','senha3')\n    relationship1 = create_relationship(1, user3.id)\n    relationships = get_user_relationships(1)\n    print(relationships)\n    assert len(relationships) == 2 and relationships[0] == 2\ndef test_get_all_relationships(app):",
        "detail": "tests.test_3relationships",
        "documentation": {}
    },
    {
        "label": "test_get_user_relationships",
        "kind": 2,
        "importPath": "tests.test_3relationships",
        "description": "tests.test_3relationships",
        "peekOfCode": "def test_get_user_relationships(app):\n    user3 = create_user('teste3@gmail.com', 'teste3','senha3')\n    relationship1 = create_relationship(1, user3.id)\n    relationships = get_user_relationships(1)\n    print(relationships)\n    assert len(relationships) == 2 and relationships[0] == 2\ndef test_get_all_relationships(app):\n    clean_relationships()\n    create_relationship(1, 2)\n    create_relationship(1, 3)",
        "detail": "tests.test_3relationships",
        "documentation": {}
    },
    {
        "label": "test_get_all_relationships",
        "kind": 2,
        "importPath": "tests.test_3relationships",
        "description": "tests.test_3relationships",
        "peekOfCode": "def test_get_all_relationships(app):\n    clean_relationships()\n    create_relationship(1, 2)\n    create_relationship(1, 3)\n    relationships = get_all_relationships()\n    assert len(relationships) == 2\ndef test_delete_relationship(app):\n    length1 = len(get_user_relationships(1))\n    delete_relationship(1,3)\n    length2 = len(get_user_relationships(1))",
        "detail": "tests.test_3relationships",
        "documentation": {}
    },
    {
        "label": "test_delete_relationship",
        "kind": 2,
        "importPath": "tests.test_3relationships",
        "description": "tests.test_3relationships",
        "peekOfCode": "def test_delete_relationship(app):\n    length1 = len(get_user_relationships(1))\n    delete_relationship(1,3)\n    length2 = len(get_user_relationships(1))\n    assert length1 == 2 and length2 == 1\ndef test_delete_user_relationships(app):\n    create_relationship(1, 3)\n    length1 = len(get_user_relationships(1))\n    delete_user_relationships(1)\n    length2 = len(get_user_relationships(1))",
        "detail": "tests.test_3relationships",
        "documentation": {}
    },
    {
        "label": "test_delete_user_relationships",
        "kind": 2,
        "importPath": "tests.test_3relationships",
        "description": "tests.test_3relationships",
        "peekOfCode": "def test_delete_user_relationships(app):\n    create_relationship(1, 3)\n    length1 = len(get_user_relationships(1))\n    delete_user_relationships(1)\n    length2 = len(get_user_relationships(1))\n    assert length1 == 2 and length2 == 0",
        "detail": "tests.test_3relationships",
        "documentation": {}
    },
    {
        "label": "generate_matches",
        "kind": 2,
        "importPath": "tests.test_4user",
        "description": "tests.test_4user",
        "peekOfCode": "def generate_matches():\n    user = create_user('teste6@gmail.com', 'teste6', 'senha6')\n    user2 = create_user('teste7@gmail.com', 'teste7', 'senha7')\n    user3 = create_user('teste8@gmail.com', 'teste8', 'senha8')\n    user4 = create_user('teste9@gmail.com', 'teste9', 'senha9')\n    movie = create_movie('nametest1', 'url')\n    movie2 = create_movie('nametest2', 'url')\n    movie3 = create_movie('nametest3', 'url')\n    create_preference(user.id, movie.id)\n    create_preference(user.id, movie2.id)",
        "detail": "tests.test_4user",
        "documentation": {}
    },
    {
        "label": "test_create_user",
        "kind": 2,
        "importPath": "tests.test_4user",
        "description": "tests.test_4user",
        "peekOfCode": "def test_create_user(app):\n    clean_users()\n    create_user('teste@gmail.com', 'teste','senha')\n    user = User.query.filter_by(email='teste@gmail.com').first()\n    assert user.id == 1\ndef test_create_repeated_user(app):\n    user = create_user('teste@gmail.com', 'teste','senha')\n    assert user == None\ndef test_get_all_users(app):\n    clean_users()",
        "detail": "tests.test_4user",
        "documentation": {}
    },
    {
        "label": "test_create_repeated_user",
        "kind": 2,
        "importPath": "tests.test_4user",
        "description": "tests.test_4user",
        "peekOfCode": "def test_create_repeated_user(app):\n    user = create_user('teste@gmail.com', 'teste','senha')\n    assert user == None\ndef test_get_all_users(app):\n    clean_users()\n    create_user('teste1@gmail.com', 'teste1','senha1')\n    create_user('teste2@gmail.com', 'teste2','senha2')\n    create_user('teste3@gmail.com', 'teste3','senha3')\n    users = get_all_users()\n    assert len(users) == 3 and users[0].id == 1 and users[2].id == 3",
        "detail": "tests.test_4user",
        "documentation": {}
    },
    {
        "label": "test_get_all_users",
        "kind": 2,
        "importPath": "tests.test_4user",
        "description": "tests.test_4user",
        "peekOfCode": "def test_get_all_users(app):\n    clean_users()\n    create_user('teste1@gmail.com', 'teste1','senha1')\n    create_user('teste2@gmail.com', 'teste2','senha2')\n    create_user('teste3@gmail.com', 'teste3','senha3')\n    users = get_all_users()\n    assert len(users) == 3 and users[0].id == 1 and users[2].id == 3\ndef test_get_user(app):\n    user = get_user('teste1@gmail.com')\n    assert user.username == 'teste1' ",
        "detail": "tests.test_4user",
        "documentation": {}
    },
    {
        "label": "test_get_user",
        "kind": 2,
        "importPath": "tests.test_4user",
        "description": "tests.test_4user",
        "peekOfCode": "def test_get_user(app):\n    user = get_user('teste1@gmail.com')\n    assert user.username == 'teste1' \ndef test_get_user_list(app):\n    users = get_user_list([3,2])\n    assert users[0].username == 'teste3' and users[1].username == 'teste2'\ndef test_authenticate_user(app):\n    user = authenticate_user('teste1@gmail.com', 'senha1')\n    assert user.authenticated\ndef test_disconnect_user(app):",
        "detail": "tests.test_4user",
        "documentation": {}
    },
    {
        "label": "test_get_user_list",
        "kind": 2,
        "importPath": "tests.test_4user",
        "description": "tests.test_4user",
        "peekOfCode": "def test_get_user_list(app):\n    users = get_user_list([3,2])\n    assert users[0].username == 'teste3' and users[1].username == 'teste2'\ndef test_authenticate_user(app):\n    user = authenticate_user('teste1@gmail.com', 'senha1')\n    assert user.authenticated\ndef test_disconnect_user(app):\n    user = create_user('teste4@gmail.com', 'teste4','senha4')\n    authenticate_user(user.email, user.password)\n    userDisconnected = disconnect_user(user)",
        "detail": "tests.test_4user",
        "documentation": {}
    },
    {
        "label": "test_authenticate_user",
        "kind": 2,
        "importPath": "tests.test_4user",
        "description": "tests.test_4user",
        "peekOfCode": "def test_authenticate_user(app):\n    user = authenticate_user('teste1@gmail.com', 'senha1')\n    assert user.authenticated\ndef test_disconnect_user(app):\n    user = create_user('teste4@gmail.com', 'teste4','senha4')\n    authenticate_user(user.email, user.password)\n    userDisconnected = disconnect_user(user)\n    assert user.authenticated == False\ndef test_set_admin(app):\n    clean_users()",
        "detail": "tests.test_4user",
        "documentation": {}
    },
    {
        "label": "test_disconnect_user",
        "kind": 2,
        "importPath": "tests.test_4user",
        "description": "tests.test_4user",
        "peekOfCode": "def test_disconnect_user(app):\n    user = create_user('teste4@gmail.com', 'teste4','senha4')\n    authenticate_user(user.email, user.password)\n    userDisconnected = disconnect_user(user)\n    assert user.authenticated == False\ndef test_set_admin(app):\n    clean_users()\n    clean_admins()\n    user = create_user('adminteste@gmail.com', 'adminteste','adminteste')\n    adminAttempt1 = Admin.query.filter_by(uid=user.id).first()",
        "detail": "tests.test_4user",
        "documentation": {}
    },
    {
        "label": "test_set_admin",
        "kind": 2,
        "importPath": "tests.test_4user",
        "description": "tests.test_4user",
        "peekOfCode": "def test_set_admin(app):\n    clean_users()\n    clean_admins()\n    user = create_user('adminteste@gmail.com', 'adminteste','adminteste')\n    adminAttempt1 = Admin.query.filter_by(uid=user.id).first()\n    set_admin(user.id)\n    adminAttempt2 = Admin.query.filter_by(uid=user.id).first()\n    assert adminAttempt1 == None and adminAttempt2.uid == user.id\ndef test_remove_admin(app):\n    clean_users()",
        "detail": "tests.test_4user",
        "documentation": {}
    },
    {
        "label": "test_remove_admin",
        "kind": 2,
        "importPath": "tests.test_4user",
        "description": "tests.test_4user",
        "peekOfCode": "def test_remove_admin(app):\n    clean_users()\n    clean_admins()\n    user = create_user('adminteste2@gmail.com', 'adminteste2','adminteste2')\n    set_admin(user.id)\n    adminAttempt1 = Admin.query.filter_by(uid=user.id).first()\n    remove_admin(1)\n    adminAttempt2 = Admin.query.filter_by(uid=user.id).first()\n    assert adminAttempt1.uid == user.id and adminAttempt2 == None\ndef test_calc_matches(app):",
        "detail": "tests.test_4user",
        "documentation": {}
    },
    {
        "label": "test_calc_matches",
        "kind": 2,
        "importPath": "tests.test_4user",
        "description": "tests.test_4user",
        "peekOfCode": "def test_calc_matches(app):\n    clean_users_movies_preferences()\n    returnal = generate_matches()\n    recommendations = calc_matches(returnal[0])\n    print(recommendations)\n    assert recommendations[0][0] == 4 and recommendations[2][0] == 3",
        "detail": "tests.test_4user",
        "documentation": {}
    },
    {
        "label": "generate_preferences",
        "kind": 2,
        "importPath": "tests.test_5preferences",
        "description": "tests.test_5preferences",
        "peekOfCode": "def generate_preferences():\n    user = create_user('teste6@gmail.com', 'teste6', 'senha6')\n    movie = create_movie('nametest1', 'url')\n    create_movie('nametest2', 'url')\n    create_preference(1, 1)\n    create_preference(1, 2)\n    return [user.id, movie.id]\ndef test_create_preference(app):\n    clean_users_movies_preferences()\n    movie = create_movie('nametest','url')",
        "detail": "tests.test_5preferences",
        "documentation": {}
    },
    {
        "label": "test_create_preference",
        "kind": 2,
        "importPath": "tests.test_5preferences",
        "description": "tests.test_5preferences",
        "peekOfCode": "def test_create_preference(app):\n    clean_users_movies_preferences()\n    movie = create_movie('nametest','url')\n    user = create_user('teste5@gmail.com', 'teste5','senha5')\n    preference = create_preference(user.id,movie.id)\n    assert preference.mid == movie.id and preference.uid == user.id\ndef test_get_all_preferences(app):\n    clean_users_movies_preferences()\n    generate_preferences()\n    preferences = get_all_preferences()",
        "detail": "tests.test_5preferences",
        "documentation": {}
    },
    {
        "label": "test_get_all_preferences",
        "kind": 2,
        "importPath": "tests.test_5preferences",
        "description": "tests.test_5preferences",
        "peekOfCode": "def test_get_all_preferences(app):\n    clean_users_movies_preferences()\n    generate_preferences()\n    preferences = get_all_preferences()\n    assert len(preferences) == 2\ndef test_get_user_preferences(app):\n    clean_users_movies_preferences()\n    returnal = generate_preferences()\n    preferences = get_user_preferences(returnal[0])\n    assert len(preferences) == 2",
        "detail": "tests.test_5preferences",
        "documentation": {}
    },
    {
        "label": "test_get_user_preferences",
        "kind": 2,
        "importPath": "tests.test_5preferences",
        "description": "tests.test_5preferences",
        "peekOfCode": "def test_get_user_preferences(app):\n    clean_users_movies_preferences()\n    returnal = generate_preferences()\n    preferences = get_user_preferences(returnal[0])\n    assert len(preferences) == 2\ndef test_get_movie_preferences(app):\n    clean_users_movies_preferences()\n    returnal = generate_preferences()\n    preferences = get_movie_preferences(returnal[1])\n    assert len(preferences) == 1",
        "detail": "tests.test_5preferences",
        "documentation": {}
    },
    {
        "label": "test_get_movie_preferences",
        "kind": 2,
        "importPath": "tests.test_5preferences",
        "description": "tests.test_5preferences",
        "peekOfCode": "def test_get_movie_preferences(app):\n    clean_users_movies_preferences()\n    returnal = generate_preferences()\n    preferences = get_movie_preferences(returnal[1])\n    assert len(preferences) == 1\ndef test_delete_preference(app):\n    clean_users_movies_preferences()\n    returnal = generate_preferences()\n    length1 = len(get_all_preferences())\n    delete_preference(returnal[0],returnal[1])",
        "detail": "tests.test_5preferences",
        "documentation": {}
    },
    {
        "label": "test_delete_preference",
        "kind": 2,
        "importPath": "tests.test_5preferences",
        "description": "tests.test_5preferences",
        "peekOfCode": "def test_delete_preference(app):\n    clean_users_movies_preferences()\n    returnal = generate_preferences()\n    length1 = len(get_all_preferences())\n    delete_preference(returnal[0],returnal[1])\n    length2 = len(get_all_preferences())\n    assert length1 == length2+1\ndef test_delete_user_preferences(app):\n    clean_users_movies_preferences()\n    returnal = generate_preferences()",
        "detail": "tests.test_5preferences",
        "documentation": {}
    },
    {
        "label": "test_delete_user_preferences",
        "kind": 2,
        "importPath": "tests.test_5preferences",
        "description": "tests.test_5preferences",
        "peekOfCode": "def test_delete_user_preferences(app):\n    clean_users_movies_preferences()\n    returnal = generate_preferences()\n    delete_user_preferences(returnal[0])\n    length = len(get_user_preferences(returnal[0]))\n    assert length == 0\ndef test_delete_movie_preferences(app):\n    clean_users_movies_preferences()\n    returnal = generate_preferences()\n    delete_movie_preferences(returnal[1])",
        "detail": "tests.test_5preferences",
        "documentation": {}
    },
    {
        "label": "test_delete_movie_preferences",
        "kind": 2,
        "importPath": "tests.test_5preferences",
        "description": "tests.test_5preferences",
        "peekOfCode": "def test_delete_movie_preferences(app):\n    clean_users_movies_preferences()\n    returnal = generate_preferences()\n    delete_movie_preferences(returnal[1])\n    length = len(get_movie_preferences(returnal[1]))\n    assert length == 0\ndef test_calc_movie_weight(app):\n    clean_users_movies_preferences()\n    returnal = generate_preferences()\n    weight = calc_movie_weight(returnal[1])",
        "detail": "tests.test_5preferences",
        "documentation": {}
    },
    {
        "label": "test_calc_movie_weight",
        "kind": 2,
        "importPath": "tests.test_5preferences",
        "description": "tests.test_5preferences",
        "peekOfCode": "def test_calc_movie_weight(app):\n    clean_users_movies_preferences()\n    returnal = generate_preferences()\n    weight = calc_movie_weight(returnal[1])\n    assert weight == 2",
        "detail": "tests.test_5preferences",
        "documentation": {}
    }
]